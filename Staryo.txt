//39.2.7
# include <iostream> 
using namespace std; 
int a (int n) 
{if (n==1) return 1; 
if (n>1) return a(n/2)+1; 
} 
int main () 
{int n; 
cout«"enter n";cin»n; 
cout«a(n); 
return 0; 
}
//40.3.9
# include <iostream> 
using namespace std; 
void f(int n,int i) 
{if(i<=n){ 
if (n%i==0)cout«i«'\t'; 
f(n,++i);} 
} 
int main(){ 
int a; 
cout«"enter a\n";cin»a; 
f(a,1); 
return 0;}
//42.4.11
# include <iostream> 
using namespace std; 

float F(float x) 
{if(x<=5) return x*x+5; 
if ((x>5)&&(x<20)) return 0; 
if(x>=20) return 1;} 

void F(float x,float &y) 
{if(x<=5) y=x*x+5; 
if ((x>5)&&(x<20)) y=0; 
if(x>=20) y=1;} 

int main() 
{float x,y;cout«"enter x"«'\t';cin»x; 
F(x,y); 
cout«F(x)«endl«y; 
return 0;}



//43.5.1
# include <iostream> 
using namespace std; 

template <typename x> 
x** enter(x **a,int n,int m) 
{ 
for(int i=0;i<n;++i) 
for(int j=0;j<m;++j) 
{ 
cout«"enter a("«i«','«j«")"; 
cin»a[i][j]; 
} 
return a; 
} 

template <typename x> 
void show(x **a,int n,int m) 
{ 
for(int i=0;i<n;++i) 
{ 
cout«endl; 
for(int j=0;j<m;++j) 
{ 
cout«a[i][j]«'\t'; 
} 
} 
} 

template <typename x> 
x** change(x **a,int n,int m) 
{ 
for(int i=0;i<n;++i) 
for(int j=0;j<m;++j) 
{ 
if(a[i][j]>0)a[i][j]*=-1; 
} 
return a; 
} 

template <typename x> 
x** creat(x**mas,int n,int m) 
{ 
x**array=new x*[n]; 
for (int i=0;i<n;++i) 
{ 
array[i]=new x[m]; 
for(int j=0;j<m;++j)array[i][j]=0; 
} 

return array; 
} 

int main() 
{ 
int n,m; 
short int choose; 
cout«"enter size of the array:n,m \n"; 
cin»n»m; 
cout«"choose:\n0.int\n1.double\n";cin»choose; 
if(choose){double **a=creat(a,n,m);a=enter(a,n,m);change(a,n,m);show(a,n,m);} 
else {int **a=creat(a,n,m);a=enter(a,n,m);change(a,n,m);show(a,n,m);} 
return 0; 
}
//66.1.7 struct1 
# include <iostream> 
# include <cmath> 
using namespace std; 

struct point 
{ 
int x,y,z; 
}; 

double dlina(point a,point b) 
{ 
return sqrt(pow(a.x-b.x,2)+pow(a.y-b.y,2)+pow(a.z-b.z,2)); 
} 

int main() 
{ 
cout«"enter the quantity of points in the set"«endl; 
int n;cin»n; 
point a[n]; 
for (int i=0;i<n;++i) 
{ 
cout«"enter coordinates of the point number "«i«endl; 
cin»a[i].x»a[i].y»a[i].z; 
} 
double min=10000;int k,l; 
for(int i=0;i<n;++i) 
{ 
for(int j=i+1;j<n;++j) 
{ 
if(dlina(a[i],a[j])<min){min=dlina(a[i],a[j]);k=i;l=j;} 
} 
} 
cout«a[k].x«'\t'«a[k].y«'\t'«a[k].z«'\n'«a[l].x«'\t'«a[l].y«'\t'«a[l].z; 
return 0; 
}


//56.2.9
# include <iostream>
# include <fstream>
using namespace std;
int main ()
{
	ifstream in1 ("f1.txt");
	ifstream in2 ("f2.txt");
	ofstream out ("g.txt");
	double k,i;
	while (in1.peek()!=EOF)
	{
		in2>>k>>i;
		out<<k<<'\t';
		in1>>k>>i;
		if(in1.peek()!=EOF)out<<i<<'\t';
	}
	in1.close();in2.close();out.close();
	return 0;
}



//57.3.7
# include <iostream>
# include <fstream>
using namespace std;
int main()
{
ofstream out ("f.dat",ios::binary);
int n,i,a,b;
cout<<"quantity,n="<<endl;cin>>n;
cout<<"enter n numbers"<<endl;
for (int j=0;j<n;j++)
{
	cin>>i;
	out.write((char*)&i,sizeof(i));
}
out.close();
cout<<"interval,enter a,b"<<endl;cin>>a>>b;
ifstream in("f.dat",ios::binary);
while(in.peek()!=EOF)
{
	in.read((char*)&i,sizeof(i));
	if((i<=b)&&(i>=a))cout<<i<<'\t';
}
in.close();
return 0;
}






//67.2.11
# include <iostream>
# include <fstream>
# include <iomanip>
using namespace std;
ifstream in("f.txt");
ofstream out("g.txt");
struct sklad
{
	int quantity;
	double price;
	char type[15],sort[15];
	void show();
	void print();
};
void sklad::show()
{cout<<setw(15)<<type<<setw(15)<<price<<setw(15)<<sort<<setw(15)<<quantity<<endl;}
void sklad::print()
{out<<setw(15)<<type<<setw(15)<<price<<setw(15)<<sort<<setw(15)<<quantity<<endl;}
int main()
{
sklad product[10];
int num,n=0;
if(!in)cout<<"Unable to open f";
else
{
	while(in.peek()!=EOF)
	{
		in>>product[n].type;
		in>>product[n].price;
		in>>product[n].sort;
		in>>product[n].quantity;
		product[n].show();
		n++;
	}
	cout<<"maximum=";cin>>num;
	if(!out)cout<<"g opening is failed";
	else
	{
		int i,j,k;
		while(k!=n)
		{
		k=0;j=0;
		for(i=0;i<n&&!j;i++,k++)
		if(product[i].quantity>=num)
			{
				for(j=i;j<n-1;j++)product[j]=product[j+1];
				n--;
			}
		}
		for(i=0;i<n;i++)
			product[i].print();
	}
}
in.close();out.close();
return 0;
}





//90.1.15
# include <iostream>
# include <algorithm>
# include <vector>
using namespace std;
int main()
{vector <int> iVec;
int x,n;
cout<<"n=";cin>>n;
cout<<"enter n numbers"<<endl;
for (int i=0;i<n;i++)
{
	cin>>x;
	iVec.push_back(x);
}
vector<int>::iterator Max=max_element(iVec.begin(),iVec.end());
cout<<*Max<<endl;
iter_swap(Max,iVec.begin());
for(vector<int>::iterator iter=iVec.begin();iter<iVec.end();iter++)
{
	cout<<*iter;
}
return 0;
}








//90.2.5
# include <iostream>
# include <algorithm>
# include <vector>
using namespace std;
int main()
{vector <int> iVec;
int x,n;
cout<<"n=";cin>>n;
cout<<"enter n numbers"<<endl;
for (int i=0;i<n;i++)
{
	cin>>x;
	iVec.push_back(x);
}
vector <int>::size_type k1,k2;cout<<"enter k1,k2"<<endl;cin>>k1>>k2;
if (k1>=0&&k1<=k2&&k2<=n)
{
	iVec.erase(iVec.begin()+k1-1,iVec.begin()+k2);
for(vector<int>::iterator iter=iVec.begin();iter<iVec.end();iter++)
{
	cout<<*iter;
}
}
else cout<<"error";
return 0;
}


//practice #1
//task 3

# include <iostream>
using namespace std;

class Money
{
private:
//amount of the nominal
int nominal;
int amount;
static int cash;//the amount of all money in the wallet
public:
static int count;
Money():nominal(0),amount(0)
{
count++;
}
Money(int a,int b):nominal(b),amount(a)
{
count++;
}
//function allows to display nominal and its amount
void Show()
{
cout«"nominal:"«nominal«endl«"amount:"«amount«endl;
}
//function allowing to determine if there enough money for the purchase of good worth X rubles
bool IfEnoughMoney(int X)
{
return (cash>X);
}
//function allowing to determine how many goods worth Y rubles can you buy with the available money
int HowMany(int Y)
{
return cash/Y;
}
//function allowing to Set the values of the parameters of the instance
void Set(int nominal,int amount)
{
this->nominal=nominal;
this->amount=amount;
cash+=Sum();
}
//function allowing to calculate the sum of money
int Sum()
{
return nominal*amount;
}
//operation ++ overload
Money operator++()
{
cash+=nominal;
return Money(++amount,this->nominal);
}
//operation — overload
Money operator--()
{

cash-=nominal;
if (amount<0) cout«"U R debtor :p"«endl;
return Money(--amount,this->nominal);
}
//operation + overload
Money operator+(int scalar)
{

cash+=nominal*scalar;
return Money(amount+=scalar,this->nominal);
}
//Ñóììà ïðè ñóììà)
void Summa ()
{
cout«cash«endl;
}
void Count()
{
cout«count«endl;
}
};

int Money::cash=0;//initialization of a static field
int Money::count=0;

int main()
{
Money myMoney[7];//creating and initialization of wallet
myMoney[0].Set(10,3);
myMoney[1].Set(50,7);
myMoney[2].Set(100,6);
myMoney[3].Set(500,3);
myMoney[4].Set(1000,3);
myMoney[5].Set(2000,2);
myMoney[6].Set(5000,5);

for(int i=0;i<7;++i)//display
{
myMoney[i].Show();
cout«endl;
}

cout«"the price is 456 , I can buy it:";//IfEnoughMoney demonstration
if(myMoney[0].IfEnoughMoney(456 ))cout«"true"«endl;else cout«"false"«endl;
cout«"the price is 3456 , I can buy it:";
if(myMoney[0].IfEnoughMoney(3456 ))cout«"true"«endl;else cout«"false"«endl;
cout«"the price is 13456, I can buy it:";
if(myMoney[0].IfEnoughMoney(13456))cout«"true"«endl;else cout«"false"«endl;
cout«"the price is 29500, I can buy it:";
if(myMoney[0].IfEnoughMoney(29500))cout«"true"«endl;else cout«"false"«endl;
cout«"the price is 78999, I can buy it:";
if(myMoney[0].IfEnoughMoney(78999))cout«"true"«endl;else cout«"false"«endl;

cout«endl;

cout«"the price is 456 , I can buy "«myMoney[0].HowMany(456 )«endl;//HowMany demonstration
cout«"the price is 3456 , I can buy "«myMoney[0].HowMany(3456 )«endl;
cout«"the price is 13456, I can buy "«myMoney[0].HowMany(13456)«endl;
cout«"the price is 29500, I can buy "«myMoney[0].HowMany(29500)«endl;
cout«"the price is 78999, I can buy "«myMoney[0].HowMany(78999)«endl;

cout«endl«"âñåãî äåíåã";
myMoney[0].Summa();

(++myMoney[6]).Show();

cout«endl«"êîëè÷åñòâî ýêçåìïëÿðîâ ";
myMoney[0].Count();

return 0;
}








//check
#include <iostream>
#include <string>
using namespace std;
class Point
{
protected:
	int x;
	int y;
public:
	Point():x(0),y(0)
	{
	}
	Point(int x,int y):x(x),y(y)
	{
	}
	virtual void Show(string info)
	{
		cout<<"Point"<<info<<":("<<x<<","<<y<<")"<<endl;
	}
};
class PointSpace: public Point
{
protected:
	int z;
public:
	PointSpace():Point(),z(0)
	{
	}
	PointSpace(int x,int y,int z):Point(x,y),z(z)
	{
	}
	void Show(string info)
	{
		cout<<"Point"<<info<<":("<<x<<","<<y<<","<<z<<")"<<endl;
	}	
};
class PointSpaceTest: public Point
{
protected:
	int z;
public:
	PointSpaceTest():Point(),z(0)
	{
	}
	PointSpaceTest(int x,int y,int z):Point(x,y),z(z)
	{
	}
	void Show(string info)
	{
		cout<<"Point"<<info<<":("<<x<<","<<z<<","<<y<<")"<<endl;
	}	
};
int main()
{
Point *arrayPoint[4];
arrayPoint[0]=new Point(1,2);
arrayPoint[1]=new Point(3,3);
arrayPoint[2]=new PointSpace(4,5,6);
arrayPoint[3]=new PointSpaceTest(7,8,9);
for(int i=0;i<4;i++)
{
	arrayPoint[i]->Show("");
}
return 0;
}





//practice 3 library

#include<iostream>
using namespace std;

//Stack A(with class)
template <class item>
class StackA
{
	struct Element
	{
		item inf;
		Element*next;
		Element (item x,Element*p):inf(x),next(p)
		{
		}
	};
	Element*head;
public:
	StackA():head(0)
	{
	}
	bool Empty()
	{
		return head==0;
	}
	item Pop()
	{
		if(Empty())
		{
			cout<<"The Stack is empty"<<endl;
			return 0;
		}
		else
		{
			Element*r=head;
			item i=r->inf;
			head=r->next;
			delete r;
			return i;
		}
	}
	void Push(item data)
	{
		head=new Element(data,head);
	}
	item Top()
	{
		if(Empty())
		{
			cout<<"The Stack is empty"<<endl;
			return 0;
		}
		else
		{
			return head->inf;
		}
	}
};

//StackB (without class)
template <class item>
struct StackB
{
private:
	struct Element
	{
		item inf;
		Element*next;
		Element (item x,Element*p):inf(x),next(p)
		{
		}
	};
	Element*head;
public:
	StackB():head(0)
	{
	}
	bool Empty()
	{
		return head==0;
	}
	item Pop()
	{
		if(Empty())
		{
			cout<<"The Stack is empty"<<endl;
			return 0;
		}
		else
		{
			Element*r=head;
			item i=r->inf;
			head=r->next;
			delete r;
			return i;
		}
	}
	void Push(item data)
	{
		head=new Element(data,head);
	}
	item Top()
	{
		if(Empty())
		{
			cout<<"The Stack is empty"<<endl;
			return 0;
		}
		else
		{
			return head->inf;
		}
	}
};

//Queue
template <class item>
class Queue
{
	struct Element
	{
		item inf;
		Element*next;
		Element(item x):inf(x),next(0)
		{
		}
	};
	Element*head,*tail;
public:
	Queue():head(0),tail(0)
	{
	}
	bool Empty()
	{
		return head==0;
	}
	item Get()
	{
		if(Empty())
		{
			cout<<"queue empty"<<endl;
			return 0;
		}
		else
		{
			Element*t=head;
			item i=t->inf;
			head=t->next;
			if(head==NULL)
			{
				tail=NULL;
			}
			delete t;
			return i;
		}
	}
	void Put(item data)
	{
		Element*t=tail;
		tail=new Element(data);
		if(!head)
		{
			head=tail;
		}
		else
		{
			t->next=tail;
		}
	}
};

//practice 3.8.1.
# include <fstream>
# include "Practice_3_library.cpp"
# include <iostream>
using namespace std;
int main()
{
	ifstream in ("input.txt");
	ofstream out ("output.txt");
	StackA <int> t,t1;
	int i;
	while (in>>i)//filling stack t
	{
		t.Push(i);		
	}
	in.close();
	while (!t.Empty())//rewrite from t to t1 and double even numbers
	{
		i=t.Pop();
		t1.Push(i);	
		if (i%2==0)
		{
			t1.Push(i);
		}	
	}
	while (!t1.Empty())
	{
		out<<t1.Pop()<<" ";
	}
	out.close();
	return 0;
}

//practice 3.8.2
# include <fstream>
# include "Practice_3_library.cpp"
# include <iostream>
using namespace std;
int main()
{
	ifstream in ("input.txt");
	ofstream out ("output.txt");
	StackB <int> t,t1;
	int i;
	while (in>>i)//filling stack t
	{
		t.Push(i);		
	}
	in.close();
	while (!t.Empty())//rewrite from t to t1 and double even numbers
	{
		i=t.Pop();
		t1.Push(i);	
		if (i%2==0)
		{
			t1.Push(i);
		}	
	}
	while (!t1.Empty())
	{
		out<<t1.Pop()<<" ";
	}
	out.close();
	return 0;
}

//practice 3.15.1
# include <fstream>
# include "Practice_3_library.cpp"
# include <iostream>
using namespace std;
int main()
{
	ifstream in ("input.txt");
	ofstream out ("output.txt");
	Queue <int> t,t1,t2;
	int i;
	while (in>>i)//filling queue t
	{
		t.Put(i);	
	}
	in.close();
	while (!t.Empty())//rewrite from t to t1 and t2
	{
		i=t.Get();
		(i>=0)?t1.Put(i):t2.Put(i);
	}
	while (!t2.Empty())//rewrite from t2 to t1
	{
		i=t2.Get();
		t1.Put(i);
	}
	while (!t1.Empty())
	{
		out<<t1.Get()<<" ";
	}
	out.close();
	return 0;
}

//practice 3.15.2(âñ¸ â 1 ôàéëå)
# include <iostream>
# include <fstream>
template <class item>
class List
{
	struct Element
	{
		item inf;
		Element*next;
		Element(item x):inf(x),next(0)
		{
		}
	};
	Element*head;
	int size;
	Element*Find(int index)
	{
		if((index<1)||(index>size))
		{
			return 0;
		}
		else
		{
			Element*cur=head;
			for (int i=1;i<index;++i)
			{
				cur=cur->next;
			}
			return cur;
		}
	}
public:
	List():head(0),size(0)
	{
	}
	int Getlength()
	{
		retutn size;
	}
	item Get(int index)
	{
		if((index<1)||(index>size))
		{
			cout<<"mistake"<<endl;
		}
		else
		{
			Element*r=Find(index);
			return r->inf;
		}
	}
	void Insert(int index,item data)
	{
		if((index<1)||(index>size))
		{
			cout<<"mistake"<<endl;
		}
		else
		{
			Element*newP=new Element(data);
			size=Getlength()+1;
			if(index==1)
			{
				newP->next=head;
				head=newP;
			}
			else
			{Element*prev=Find(index-1);
			newP->next=prev->next;
			prev->next=newP;
			}
		}
	}
	void Remove(int index)
	{
		if((index<1)||(index>size))
		{
			cout<<"mistake"<<endl;
		}
		else
		{
			Element*cur;
			--size;
			if(index==1)
			{
				cur=head;
				head=head->next;
			}
			else
			{
				Element*prev=Find(index-1);
				cur=prev->next;
				prev->next=cur->next;
			}
			cur->next=NULL;
			delete cur;
		}
	}
	void Print()
	{
		for(Element*cur=head;cur!=NULL;cur=cur->next)
		{
			out<<cur->inf<<' ';
		}
		out<<endl;
	}
};

int main()
{
	ifstream in("input.txt");
	ofstream out("output.txt");
	List <int> L;
	int i;
	while(in>>i)
	{
		L.Insert(Getlength()+1,i);
	}
	in.close();
	out<<"First list:";
	L.Print();
	out<<"Second list:";
	for(int j=1,j<=L.Getlength;j++)
	{
		if(L.Get(j)>=0)
		{
			out<<L.Get(j)<<' ';
			L.Remove(j);
		}
	}
	L.print();
	out.close();
	return 0;
}
